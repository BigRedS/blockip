#! /usr/bin/perl

use strict;

no warnings;

use Sys::Syslog;
use Data::Dumper;
use Getopt::Long;
use Socket qw( inet_ntoa );
use Sys::Syslog qw(:standard :macros);
use File::Copy qw( move );
use Fcntl qw( :flock );
use Net::Subnet;  # libnet-subnet-perl
use Config::Tiny;  # libconfig-tiny-perl 

my $command_line = join(" ", $0, @ARGV);

# f_config is package-supplied, f_local_config is edited to suit the host:
my $f_config = -f './blockip.static' ? './blockip.static' : '/etc/blockip/blockip.static';
my $f_local_config = -f './blockip.conf' ? './blockip.conf' : '/etc/blockip/blockip.conf';

unless(-f $f_local_config){
	print STDERR "Local config file not found (checked ./blockip.conf and $f_local_config)\n";
	print STDERR "Please create one, using\n\n";
	print STDERR "    $0 --example-config > $f_local_config\n\n";
	print STDERR "Or similar; see --help output for more information\n";
}

my ($help,$unblock,$noprompt,$debug,$iptables,$dry_run,$config_help,$example_config) = undef;
my ($list,$when) = undef;
GetOptions(
	"config-file=s" => \$f_config,
	"debug"         => \$debug,
	"dry-run|d"     => \$dry_run,
	"example-config"=> \$example_config,
	"help|h"        => \$help,
	"iptables"      => \$iptables,
	"list-blocks|l" => \$list,
	"no-prompt"     => \$noprompt,
	"unblock"       => \$unblock,
	"when"          => \$when,
) or die ("Error parsing command-line options");
usage() if $help;
example_config() if $example_config;

my $ip_address = shift;


_debug("Config file: $f_config");
my $config = {};
if(-f $f_config){
	$config = Config::Tiny->read( $f_config ) or die ("Error reading config file '$f_config' : ".Config::Tiny->errstr);
}else{
	print "No config file, carrying on with defaults\n";
}

_debug("Local config file: $f_config");
my $local_config = {};
if(-f $f_local_config){
	$local_config = Config::Tiny->read( $f_local_config ) or die ("Error reading config file '$f_local_config' : ".Config::Tiny->errstr);
}

# If we're passed --iptables, then the block_command is overriden to an iptables invocation.
if($iptables){
	$config->{'_'}->{'block_command'}   = 'iptables -A INPUT -s %ip_address% -j DROP';
	$config->{'_'}->{'unblock_command'} = 'iptables -D INPUT -s %ip_address% -j DROP';
}

my ($cachefile);
if($local_config->{'_'}->{cache_dir}){
	die "Cache dir '".$local_config->{'_'}->{cache_dir}."' does not exist" unless -d $local_config->{'_'}->{cache_dir};
	$cachefile = $local_config->{'_'}->{cache_dir}."/blockip.cache";
	$cachefile =~ s#//#/#g;
}

get_block($cachefile,$ip_address)  if $when;
dump_cache($cachefile) if $list;

openlog("blockip", "nofatal,pid", LOG_DAEMON);
syslog("INFO", "Command line: $command_line");

if($unblock){
	syslog("INFO", "Unblocking '$ip_address'");
	if(unblock_address($ip_address)){
		exit 0;
	}else{
		exit 1;
	}
}

_debug("Resolving static whitelists");
my $whitelist     = resolve_whitelist($config->{'whitelist'});
my $confirm_first = resolve_whitelist($config->{'confirm-first'});
_debug("Resolving local whitelists");
my $local_whitelist     = resolve_whitelist($local_config->{'whitelist'});
my $local_confirm_first = resolve_whitelist($local_config->{'confirm-first'});

# Never block loopback or private addresses
my $rfc1918 = subnet_matcher qw(10.0.0.0/8 172.16.0.0/12 192.168.0.0/16);
my $loopback = subnet_matcher qw(127.0.0.0/8);

# Abort if the address we've been asked to block is whitelisted:
if(my $message = check_whitelists($ip_address)){
	syslog("INFO", "Refusing to block '$ip_address'");
	_error($message);
}

# We now prompt the user to make sure they do want to block this address; 
# if it is on the confirm-first list

my $input;

my($reason,$file);
if(($reason,$file) = check_confirm_firsts($ip_address) and $reason =~ m/.+/){
	print "Address '$ip_address' is listed as confirm-first in $file\n";
	print "Reason given:\n  $reason\n\n";
	print "Are you sure you want to block this address? [Y/n] ";
	$input = <STDIN>;
	unless($input =~ m/^y$/i){
		print "Aborting\n";
		exit;
	}
}

# Block the address:
syslog("INFO", "Blocking '$ip_address'");
if(block_address($ip_address)){
	exit 0;
}else{
	exit 1;
}
# # #
# #
#

sub block_address{
	my $ip_address = shift;
	my $cmd;
	if($cmd = $config->{'_'}->{'block_command'}){
		$cmd =~ s/%ip_address%/$ip_address/;
	}else{
		$cmd = "ip route add blackhole $ip_address";
	}
	_debug("Block command: $cmd");
	syslog("INFO", "Block command: '$cmd'");
	if($dry_run){
		syslog("INFO", "Called with dry-run, exiting without blocking");
		print "Called with dry-run, exiting without blocking\n";
		print "Would have executed:\n $cmd\n";
		return;
	}
	my $output = `$cmd 2>&1`;
	my $retval = $?>>8;

	chomp($output);
	_debug("Output: $output");

	if($retval != 0){
		if($output eq 'RTNETLINK answers: File exists'){
			syslog("INFO", "Already blocked");
			print "Address already blocked\n";
			return 1;
		}else{
			syslog("INFO", "FAILED. Aborting");
			print "Command ($cmd) FAILED:\n $output\n";
			return undef;
		}
	}
	add_to_cache($cachefile, $ip_address);
	_debug("Exited: $retval");
	syslog("INFO", "Exited: $retval");
}

sub unblock_address{
	my $ip_address = shift;
	my $cmd;
	if($cmd = $config->{'_'}->{'unblock_command'}){
		$cmd =~ s/%ip_address%/$ip_address/;
	}else{
		$cmd = "ip route del blackhole $ip_address";
	}
	syslog("INFO", "Unblock command: '$cmd'");
	_debug("Unblock command: $cmd");
	if($dry_run){
		syslog("INFO", "Called with dry-run, exiting without unblocking");
		print "Called with dry-run, exiting without unblocking\n";
		print "Would have executed:\n $cmd\n";

		return;
	}
	my $output = `$cmd 2>&1`;
	my $retval = $?>>8;

	chomp($output);
	_debug("Output: $output");

	if($retval != 0){
		if($output eq 'RTNETLINK answers: No such process'){
			syslog("INFO", "Address not blocked");
			print "Address not blocked\n";
			return 1;
		}else{
			syslog("INFO", "FAILED. Aborting");
			print "Command ($cmd) FAILED:\n $output\n";
			return undef;
		}
	}
	remove_from_cache($cachefile, $ip_address);
	_debug("Exited: $retval");
	syslog("INFO", "Exited: $retval");
}

# Is passed an IP address, checks all the whitelists for its presence. 
sub check_whitelists{
	my $ip_address = shift;
	_debug("Checking $ip_address against whitelists");

	if($ip_address eq ""){
		return ("You didn't specify an IP address. Perhaps see --help output?");
	}

	unless($ip_address =~ m/(\d+)\.(\d+)\.(\d+)\.(\d+)/){
		return("'$ip_address' does not look like a valid IP address; needs to be four octets. (try with --help?)");
	}
	unless($1 <= 256 && $2 <= 256 && $3 <= 256 && $4 <= 256){
		return("'$ip_address' does not look like a valid IP address; no octet may be greater than 256");
	}
	
	if($rfc1918->($ip_address)){
		return("$ip_address is an RFC1918 (private, not-routable) address. Do not block it.");
	}
	
	if($loopback->($ip_address)){
		return("$ip_address is a loopback address. Do not block it.");
	}
	foreach my $reason (sort(keys(%{$local_whitelist}))){
		_debug("  Local whitelist: $reason");
		_debug(join("\n    ", @{$local_whitelist->{$reason}}));
		my $networks = subnet_matcher(@{$local_whitelist->{$reason}}); 
		if($networks->($ip_address)){
			return "$ip_address is whitelisted, as '$reason'";
		}
	}

	foreach my $reason (sort(keys(%{$whitelist}))){
		_debug("  Static whitelist: $reason");
		_debug("    ".join("\n    ", @{$whitelist->{$reason}}));
		my $networks = subnet_matcher(@{$whitelist->{$reason}}); 
		if($networks->($ip_address)){
			return "$ip_address is whitelisted, as '$reason'";
		}
	}


	return undef;
}

sub check_confirm_firsts{
	my $ip_address = shift;
	_debug("Checking $ip_address against confirm-first list");
	foreach my $reason (keys(%{$local_confirm_first})){
		_debug("  Local confirm-first: $reason");
		_debug("    ".join("\n    ", @{$local_confirm_first->{$reason}}));
		my $networks = subnet_matcher(@{$local_confirm_first->{$reason}}); 
		if($networks->($ip_address)){
			return ($reason, $f_local_config);
		}
	}

	foreach my $reason (keys(%{$confirm_first})){
		_debug("  Static confirm-first: $reason");
		_debug("    ".join("\n    ", @{$confirm_first->{$reason}}));
		my $networks = subnet_matcher(@{$confirm_first->{$reason}}); 
		if($networks->($ip_address)){
			return ($reason, $f_config);
		}
	}
	return undef;
}
		

# Takes a whitelist as returned by the config (a hashref, with IP 
# addresses/CIDR masks as keys, reasons as values) and returns as 
# a hashref with reasons as keys and an arrayref of IP addresses/
# CIDR masks as values. 
sub resolve_whitelist{
	my $whitelist = shift;
	my $return;
	foreach my $ip_address (keys(%{$whitelist})){
		my $reason = $whitelist->{$ip_address};
		next if ($ip_address =~ m/^\d+\.\d+\.\d+\.\d+/);
		my @addresses = gethostbyname($ip_address);
		@addresses = map { inet_ntoa($_) } @addresses[ 4 .. $#addresses ];
		_debug("  Resolved $ip_address to ".join(" ", @addresses));
		foreach my $record ( @addresses ) {
			$whitelist->{$record} = $reason;
		}
		delete($whitelist->{$ip_address});
	}
	foreach my $ip_address (keys(%{$whitelist})){
		my $reason = $whitelist->{$ip_address};
		$ip_address.="/32" unless $ip_address =~ m/\/\d+$/;
		push(@{$return->{$reason}}, $ip_address);
	}
	return $return;
}

sub add_to_cache{
	my $cachefile = shift;
	my $ip_address = shift;

	return unless $cachefile;

	my $f_temp = $cachefile.".temp";
	open (my $fh_temp, ">", $f_temp) or die ("Failed to open cache temp file '$f_temp' for writing: $!");
	flock($fh_temp, LOCK_EX) or die ("Failed to get exclusive lock on cache temp file '$f_temp': $!");

	open(my $fh_in, "<", $cachefile) or die ("Failed to open cache file '$cachefile' for reading: $!");
	while (my $line = readline($fh_in)){
		print $fh_temp $line;
	}
	print $fh_temp time(), ":", $ip_address, "\n";
	close($fh_in) or die ("Failed to close cache file '$cachefile' :$!");

	move($f_temp, $cachefile);
	close($fh_temp) or die ("Failed to close cache temp file '$f_temp' :$!");
}

sub remove_from_cache{
	my $cachefile = shift;
	my $ip_address = shift;

	return unless $cachefile;

	my $f_temp = $cachefile.".temp";
	open (my $fh_temp, ">", $f_temp) or die ("Failed to open cache temp file '$f_temp' for writing: $!");
	flock($fh_temp, LOCK_EX) or die ("Failed to get exclusive lock on cache temp file '$f_temp': $!");

	open(my $fh_in, "<", $cachefile) or die ("Failed to open cache file '$cachefile' for reading: $!");
	while (my $line = readline($fh_in)){
		print $fh_temp $line unless $line =~ m/^\d+:$ip_address$/;
	}
	close($fh_in) or die ("Failed to close cache file '$cachefile' :$!");

	move($f_temp, $cachefile);
	close($fh_temp) or die ("Failed to close cache temp file '$f_temp' :$!");
}

sub get_block{
	my $cachefile = shift;
	my $address = shift;
	my @cache = get_cache($cachefile);
	foreach my $line(@cache){
		if($line->{address} eq $address){
			print "[".localtime($line->{time})."] ".$line->{address}."\n";
		}
	}
	exit;
}

sub dump_cache{
	my $cachefile = shift;
	my @cache = get_cache($cachefile);
	foreach my $line (@cache){
		print "[".localtime($line->{time})."] ".$line->{address}."\n";
	}
	exit;
}

sub get_cache{
	my $cachefile = shift;
	open(my $fh, "<", $cachefile);
	my @lines;
	while (my $line = readline($fh)){
		chomp($line);
		my ($time,$address,$expiry) = split(m/:/, $line);
		push(@lines, {time => $time, address=> $address, expiry => $expiry});
	}
	return @lines;
}


sub _error{
	my $message = shift;
	chomp($message);
	print STDERR $message, "\n";
	exit 1;
}

sub _debug{
	return unless $debug;
	my $message = shift;
	chomp($message);
	print STDERR $message, "\n";
}

sub usage{
print <<"EOF";
blockip

   Safely prevents hosts reaching this machine. 

usage:

   blockip <options> host

Options:

    --config-file <file>    use <file> as config file. Default: $f_config 
    --debug                 print debugging output
    --dry-run               run through all the checks, but don't (un)block
    --example-config        print out an example blockip.conf
    --help                  see this help
    --iptables              use iptables for block/unblock (overrides config file)
    --list                  print known blocks
    --config-help           see config file help
    --no-prompt             don't prompt for confirmation (for scripts)
    --unblock               unblock IP address

The unblocking may not work; it assumes that the IP address has been blocked
in the same way as blockip is configured to (see 'block_command' and 
'unblock_command' in the config file).

'known' blocks are stored in a cache file, kept in the cache_dir set in the 
local config file; where this is unset no record is kept.


blockip has two configuration files. blockip.static is provided by the 
package manager, and should not be edited by anybody else. It contains just a 
whitelist and confirm-first list.

blockip.conf is for normal human consumption, and may contain all config 
options. It is created on package installation. You can recreate it with

blockip --example-config > /etc/blockip/blockip.conf

EOF
exit;
}

sub example_config{
print STDOUT << "EOF";
# block_command and unblock_command are executed when blocking and unblocking 
# an address, respectively. The default is to use `ip route add blackhole` and 
# `ip route del blackhole`
# There is one available variable, %ip_address%, which is the address to be 
# blocked or re-permitted:

#block_command = ip route add blackhole %ip_address%
#unblock_command = ip route del blackhole %ip_address%

cache_dir = /var/cache/blockip

# The whitelist and confirm-before list must come *after* any other directives.
#
# Each is a list of elements of the form
#
# <address> = <name>
#
# Where <address> may be an IP address, a network in CIDR notation, or a DNS 
# name. The 'name' is simply a string used to tell a user why they ought not 
# delete this address.

# Whitelisted addresses may not be blocked. RFC1918 and loopback ones are 
# hardcoded into the script:
#  [whitelist]
#  1.2.3.4 = Example address

# Confirm-first addresses may be blocked, but the user will first be prompted
# with the label given here, in case that makes them change their mind. They
# are intended for things like search engine bots:
#  [confirm-first]
#  216.58.213.100 = Google Bot

EOF
exit;
}
